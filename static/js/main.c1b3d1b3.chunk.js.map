{"version":3,"sources":["utils/index.js","components/Main/constants.js","components/Main/Sym/index.js","components/Main/Controls/index.js","components/Main/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["IS_FULLSCREEN_AVAILABLE","Boolean","document","exitFullscreen","documentElement","requestFullscreen","getRandomInt","max","Math","floor","random","phrases","maxLen","reduce","acc","str","length","LINES","padding","repeat","ceil","push","replace","INITIAL_LINE","Sym","children","index","onAnimationIteration","style","useMemo","animationDuration","visibility","undefined","Controls","onReload","isReloading","visible","useContext","ControlsContext","toggleFullscreen","useCallback","fullscreenElement","useEffect","handleKeyDown","code","addEventListener","passive","removeEventListener","className","cls","onClick","disabled","Main","useState","lines","setLines","line","setLine","nextLine","setNextLine","phase","setPhase","startReloadText","nextLines","filter","l","reloadTimer","setTimeout","clearTimeout","mergedLine","substring","split","map","s","i","key","React","createContext","hidden","App","controlsVisible","setControlsVisible","timerId","useRef","toggleControls","throttle","delay","current","handleMove","handleClick","providerValue","Provider","value","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c1b3d1b3.chunk.js","sourcesContent":["export const IS_FULLSCREEN_AVAILABLE = Boolean(document.exitFullscreen && document.documentElement && document.documentElement.requestFullscreen);\n\nexport const getRandomInt = (max) => Math.floor(Math.random() * max);","import { getRandomInt } from '../../utils';\n\nconst phrases = [\n  'Всё получится',\n  'Ты всё успеешь',\n  'Ты справишься',\n  'Улыбнись себе',\n  'Посмотри в окно',\n  'Посмотри в окно',\n];\nlet maxLen = phrases.reduce((acc, str) => str.length > acc ? str.length : acc, 0);\nif (maxLen % 2 !== 0) {\n  maxLen += 1;\n}\n\nexport const CHAR_SPACER = '_';\nexport const LINES = phrases.reduce((acc, str) => {\n  if (str.length % 2 !== 0) {\n    str += CHAR_SPACER;\n  }\n  const padding = CHAR_SPACER.repeat(Math.ceil((maxLen - str.length) / 2));\n  acc.push(\n    (padding + str + padding).replace(/\\s/g, CHAR_SPACER)\n  );\n  return acc;\n}, []);\n\nexport const INITIAL_LINE = LINES[getRandomInt(LINES.length)];\nexport const RELOAD_DELAY = 10000;\nexport const ANIMATION_MAX_TIME = 6000;\nexport const ANIMATION_MIN_TIME = 2000;","import React, { useMemo } from 'react';\nimport { ANIMATION_MAX_TIME, ANIMATION_MIN_TIME, CHAR_SPACER } from '../constants';\n\nexport const Sym = ({ children, index, onAnimationIteration }) => {\n  const style = useMemo(() => ({\n    animationDuration: `${ANIMATION_MIN_TIME + Math.random() * (ANIMATION_MAX_TIME - ANIMATION_MIN_TIME)}ms`,\n    visibility: children === CHAR_SPACER ? 'hidden' : undefined,\n  }), []);\n  return <span onAnimationIteration={() => onAnimationIteration(index)} style={style}>{children}</span>;\n};\n","import React, { useCallback, useEffect, useContext } from 'react';\nimport { IS_FULLSCREEN_AVAILABLE } from '../../../utils';\nimport cls from \"classnames\";\nimport './index.css';\nimport { ControlsContext } from '../../App';\n\nexport const Controls = ({ onReload, isReloading }) => {\n  const { visible } = useContext(ControlsContext);\n\n  const toggleFullscreen = useCallback(() => {\n    if (!document.fullscreenElement) {\n      document.documentElement.requestFullscreen();\n    } else {\n      document.exitFullscreen();\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleKeyDown = ({ code } = {}) => code === 'KeyF' && toggleFullscreen();\n    document.addEventListener('keydown', handleKeyDown, { passive: true });\n    return () => {\n      document.removeEventListener('keydown', handleKeyDown, { passive: true });\n    }\n  }, [toggleFullscreen]);\n\n  return <div className={cls('controls', { 'controls_hidden': !visible })}>\n    { IS_FULLSCREEN_AVAILABLE && <button onClick={toggleFullscreen}><span>f</span>ullscreen</button> }\n    <button disabled={isReloading} onClick={onReload}>next</button>\n  </div>\n};","import React, { useState, useCallback, useEffect } from \"react\";\nimport { getRandomInt } from '../../utils';\nimport './index.css';\nimport '../../styles/animations.css';\nimport {\n  INITIAL_LINE,\n  LINES,\n  RELOAD_DELAY,\n} from './constants';\nimport { Sym } from './Sym';\nimport { Controls } from './Controls';\n\nexport const Main = () => {\n  const [lines, setLines] = useState([ ...LINES ]);\n  const [line, setLine] = useState(INITIAL_LINE);\n  const [nextLine, setNextLine] = useState(line);\n  const [phase, setPhase] = useState(false);\n  const isReloading = line !== nextLine;\n\n  const startReloadText = useCallback(() => {\n    if (isReloading) {\n      return;\n    }\n    const nextLines = (lines.length > 1 ? lines : LINES).filter(l => l !== line);\n    setLines(nextLines);\n    setNextLine(nextLines[getRandomInt(nextLines.length)]);\n  }, [lines, setLines, line, phase, setPhase, nextLine, setNextLine]);\n\n  useEffect(() => {\n    const reloadTimer = setTimeout(startReloadText, RELOAD_DELAY);\n    return () => {\n      clearTimeout(reloadTimer);\n    }\n  }, [line]);\n\n  const onAnimationIteration = useCallback((index) => {\n    if (line[index] !== nextLine[index]) {\n      const mergedLine = line.substring(0, index) + nextLine[index] + line.substring(index + 1);\n      setLine(mergedLine);\n    }\n  }, [line, setLine, nextLine]);\n\n  return <div className={'main'}>\n    <div className={'head'}>{''}</div>\n    <div className={'lines'}>\n      <code className={'line'}>\n        { line.split('').map((s, i) => (<Sym\n          key={`${i}-${s}-${phase}`}\n          index={i}\n          onAnimationIteration={onAnimationIteration}\n        >{s}</Sym>)) }\n      </code>\n    </div>\n    <Controls onReload={startReloadText} isReloading={isReloading} />\n  </div>;\n}","import React, { useEffect, useMemo, useRef, useState } from 'react';\nimport { Main } from \"../Main\";\nimport './index.css';\nimport throttle from 'lodash.throttle';\nimport cls from \"classnames\";\n\nconst THROTTLE_DELAY = 200;\nconst MOVE_HIDE_DELAY = 1500;\nconst CLICK_HIDE_DELAY = 2500;\n\nexport const ControlsContext = React.createContext({ hidden: true });\n\nfunction App() {\n  const [controlsVisible, setControlsVisible] = useState(false);\n  const timerId = useRef(null);\n\n  useEffect(() => {\n    const toggleControls = throttle(({ visible = false, delay }) => {\n      clearTimeout(timerId.current);\n      setControlsVisible(visible);\n      if (visible) {\n        timerId.current = setTimeout(() => setControlsVisible(false), delay);\n      }\n    }, THROTTLE_DELAY);\n\n    const handleMove = () => toggleControls({ visible: true, delay: MOVE_HIDE_DELAY, });\n\n    const handleClick = () => toggleControls({ visible: !controlsVisible, delay: CLICK_HIDE_DELAY, });\n\n    document.addEventListener('mousemove', handleMove, { passive: true });\n    document.addEventListener('click', handleClick, { passive: true })\n    return () => {\n      document.removeEventListener('mousemove', handleMove, { passive: true });\n      document.removeEventListener('click', handleClick, { passive: true })\n    }\n  }, [controlsVisible, setControlsVisible]);\n\n  const providerValue = useMemo(() => ({ visible: controlsVisible }), [controlsVisible]);\n\n  return (\n    <ControlsContext.Provider value={providerValue}>\n      <div className={cls('app', { 'app_noControls': !controlsVisible })}>\n        <Main />\n      </div>\n    </ControlsContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}